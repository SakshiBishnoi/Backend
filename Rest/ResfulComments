// GET /comments - list all comments
// GET /comments/:id Get one comment (using ID)
// - request representation of a specified resource, should retrive data only

// POST /comments - Create a new comment 
// - used to submit an entity to the sepcified resoucers, often causing change in state or side effects on server.

// PATCH /comments/:id - Update one comment
// - Used to apply partial modifications.

// DELETE /comments/:id Destroy one comment
// Head / - ask for response like  GET but without body
// PUT / - replace the whole resource
// CONNECT /  - establish a tunnel to the server identified by target resources.
// OPTIONS / - used to describe communication option for target resource
// TRACE / - performs a message a look-back test along the path to the target resource.

AN EXAMPLE - USING COMMENTS AS A RESOURCE
NAME    /PATH              VERB   - PURPOSE

Index   /comments          GET    - Display all comments
New     /comments/new      GET    - Form to create new comment
Create  /comments          POST   - Creates new comment on server
Show    /comments/:id      GET    - Details for one specific comment
Edit    /comments/:id/edit GET    - Form to edit specific comment
Update  /comments/:id      PATCH  - Updates specific comment on server
Destroy /comments/:id      DELETE - Deletes specific item on server

//This code is defining a route in an Express.js application that handles a PATCH request to update a specific comment. A PATCH request is used to partially update a resource, in this case, a comment.
//a route refers to a specific URL path that an application responds to. In other words, it's a way to map a URL to a specific handler function that will be executed when a request is made to that URL.
app.patch('/comments/:id', (req,res) => {
    //res.send('Updating Something')
    const { id } = req.params; //contains the route parameters extracted from the URL.
    //const comment = comments.find(c => c.id === id );
    // it will iterate through the comments array and check each element's id property against the id parameter passed in the URL. If it finds a match, it will return that comment object and assign it to the comment variable.i
    console.log(req.body.comment);
    res.send("all godd");
})